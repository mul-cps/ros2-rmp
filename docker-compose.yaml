version: "3.9"

# First network configuration. Change this to the network interface you want to use primarily. (Better configuration for multiple Network interfaces needed).
networks:
  rmp:
    driver: bridge

# Attention: child services will inherit settings from their parents. So if you set a network_mode: host in the base service, all child services will also use host networking. This is not always what you want. So be careful with this.

services:
  # Base image containing dependencies.
  base:
    image: ghcr.io/mul-cps/ros2-rmp/rmp:base
    build:
      context: .
      dockerfile: docker/Dockerfile
      tags:
        - ghcr.io/mul-cps/ros2-rmp/rmp:base
      args:
        ROS_DISTRO: humble
      target: base
      x-bake:
        platforms:
          - linux/arm64
          - linux/amd64
    # Interactive shell
    stdin_open: true
    tty: true
    # Networking and IPC for ROS 2
    network_mode: host
    ipc: host
    # Needed to display graphical applications
    environment:
      # Allows graphical programs in the container.
      - DISPLAY=${DISPLAY}
      - QT_X11_NO_MITSHM=1
      - NVIDIA_DRIVER_CAPABILITIES=all
      # set correct ros2 parameters: domain id and rmw implementation
      - ROS_DOMAIN_ID=5
      - RMW_IMPLEMENTATION=rmw_cyclonedds_cpp
      #- CYCLONEDDS_URI=file:///cyclonedds.xml
    volumes:
      # Allows graphical programs in the container.
      - /tmp/.X11-unix:/tmp/.X11-unix:rw
      - ${XAUTHORITY:-$HOME/.Xauthority}:/root/.Xauthority
      - ./config/entrypoint.sh:/entrypoint.sh
      # - ./config/cyclonedds.xml:/cyclonedds.xml
    restart: unless-stopped

  # Overlay image containing the project specific source code.
  overlay:
    extends: base
    image: ghcr.io/mul-cps/ros2-rmp/rmp:overlay
    build:
      context: .
      dockerfile: docker/Dockerfile
      tags:
        - ghcr.io/mul-cps/ros2-rmp/rmp:overlay
      target: overlay
      x-bake:
        platforms:
          - linux/arm64
          - linux/amd64
    volumes:
      - .:/repo
    command: >
      /bin/bash

  # Additional dependencies for GUI applications
  guis:
    extends: overlay
    image: ghcr.io/mul-cps/ros2-rmp/rmp:guis
    build:
      context: .
      dockerfile: docker/Dockerfile
      tags:
        - ghcr.io/mul-cps/ros2-rmp/rmp:guis
      target: guis
      x-bake:
        platforms:
          - linux/arm64
          - linux/amd64
    command: >
      /bin/bash
    devices:
      - /dev/dri:/dev/dri

  # Robot State Publisher
  rsp:
    extends: overlay
    command: >
      ros2 launch cps_rmp220_support rsp.launch.py

  # Controller
  controller:
    extends: base
    command: >
      ros2 run segwayrmp SmartCar --ros-args -r cmd_vel:=cmd_vel_out -p serial_full_name:=/dev/segway
    devices:
      - /dev/segway:/dev/segway #/dev/ttyUSB0
      #- /dev/ttyUSB0:/dev/ttyUSB0
    privileged: true

  # teleop
  teleop:
    extends: base 
    depends_on:
      - controller
    command: >
      ros2 launch rmp220_teleop robot_joystick.launch.py 
    devices:
      - /dev/input/js0:/dev/input/js0
    privileged: true

  # lidar
  lidar:
    extends: overlay
    depends_on:
      - lidar_filter
    command: >
      ros2 launch cps_rmp220_support robot_lidar.launch.py serial_port:=/dev/rplidarA1
    devices:
      - /dev/ttyUSB0:/dev/rplidarA1 #udevrules needed for this to work:

  # Lidar filtering node.
  lidar_filter:
    extends: overlay
    command: >
      ros2 launch cps_rmp220_support robot_scan_filter.launch.py

  # localization by ekf node
  ekf:
    extends: overlay
    depends_on:
      - controller
      - rsp
    command: >
      ros2 launch cps_rmp220_support robot_localization.launch.py

  # mapping
  mapping:
    extends: overlay
    depends_on:
      - ekf
      - rsp
      - lidar
    command: >
      ros2 launch cps_rmp220_support robot_mapping.launch.py

  # slam-toolbox-localization
  localization:
    extends: overlay
    depends_on:
      - ekf
      - rsp
      - lidar
    command: >
      ros2 launch cps_rmp220_support robot_mapping_localization.launch.py map_file_name:=/repo/maps/map.yaml

  # amcl_localization
  amcl:
    extends: overlay
    depends_on:
      - ekf
      - rsp
      - lidar
    command: >
      ros2 launch cps_rmp220_support robot_amcl.launch.py map:=/repo/maps/map.yaml

  # navigation
  navigation:
    extends: overlay
    depends_on:
      - controller
      - teleop
      - rsp
      - lidar
      - ekf
      - oakd
    command: >
      ros2 launch nav2_bringup bringup_launch.py slam:=False map:=/repo/maps/map_01-26-24.yaml use_sim_time:=False use_composition:=True params_file:=/repo/config/nav2_params.yaml
  #maps/map_openlabday.yaml
  # bash
  bash:
    extends: overlay
    command: >
      /bin/bash

  # rviz2
  rviz2:
    #extends: guis
    image: ghcr.io/mul-cps/ros2-rmp/rmp:guis
    command: >
      ros2 launch cps_rmp220_support rviz.launch.py
    # Needed to display graphical applications
    privileged: true # really necessary?
    environment:
      # Allows graphical programs in the container.
      - DISPLAY=${DISPLAY}
      - QT_X11_NO_MITSHM=1
      - NVIDIA_DRIVER_CAPABILITIES=all
      - ROS_DOMAIN_ID=5
      - RMW_IMPLEMENTATION=rmw_cyclonedds_cpp
      - CYCLONEDDS_URI=file:///cyclonedds.xml
    volumes:
      # Allows graphical programs in the container.
      - /tmp/.X11-unix:/tmp/.X11-unix:rw
      - ${XAUTHORITY:-$HOME/.Xauthority}:/root/.Xauthority
      - ./config/cyclonedds.xml:/cyclonedds.xml
    network_mode: host
    ipc: host
    
  # Foxglove Studio Bridge
  foxglove_bridge:
    extends: overlay
    command: >
      ros2 launch foxglove_bridge foxglove_bridge_launch.xml port:=8765
    volumes:
      - /opt/cps/certs:/certs

  # Foxglove Studio Webserver
  foxglove:
    image: ghcr.io/foxglove/studio:latest
    stdin_open: true
    tty: true
    # Networking
    network_mode: bridge
    ports:
      - 8080:8080
    depends_on:
      - foxglove_bridge
    volumes:
      - ./foxglove/default.json:/foxglove/default-layout.json

  # USB Camera Stream
  cam:
    extends: overlay
    command: >
      ros2 run ros2_cam_openCV cam_node
    devices:
      - /dev/video0:/dev/video0


  # ROS2 Frontier exploration
  explorer:
    extends: overlay
    depends_on:
      - controller
      - teleop
      - rsp
      - lidar
      - ekf
      - navigation
    command: >
      ros2 launch cps_rmp220_support robot_exploration.launch.py

  ### Images for ROS1 Interactions
  #ROS1 Bridge
  ros1bridge:
    image: ghcr.io/mul-cps/ros2-rmp/ros1bridge
    command: >
      ros2 run ros1_bridge dynamic_bridge --bridge-all-2to1-topics
    build:
      context: .
      dockerfile: docker/Dockerfile
      tags:
        - ghcr.io/mul-cps/ros2-rmp/ros1bridge
      args:
        ROS_DISTRO: humble
      target: bridge
      x-bake:
        platforms:
          #- linux/arm64
          - linux/amd64
      # Networking and IPC for ROS 2
    network_mode: host
    ipc: host
    environment:
      - ROS_DOMAIN_ID=5
      - RMW_IMPLEMENTATION=rmw_cyclonedds_cpp
      - ROS_MASTER_URI=http://localhost:11311 # is configured to run roscore on the robot but could change to local ros1 machine here
  
  #ROS1 roscore
  roscore:
    command: >
      roscore
    extends: ros1bridge
    network_mode: host
    ipc: host
    environment:
      - ROS_DOMAIN_ID=5
      - RMW_IMPLEMENTATION=rmw_cyclonedds_cpp
      - ROS_MASTER_URI=http://localhost:11311 # is configured to run roscore on the robot but could change to local ros1 machine here

  # ROS2 oak-d-lite camera
  oakd:
    extends: overlay
    command: >
      ros2 launch depthai_examples stereo.launch.py
    device_cgroup_rules:
      - 'c 189:* rmw'
    volumes:
      - /dev/bus/usb:/dev/bus/usb

  # for testing the oak-d-lite camera -> works now with cgroup rules
  depthai:
    image: luxonis/depthai:latest
    command: >
      python3 /depthai/depthai_demo.py
    stdin_open: true
    tty: true
    device_cgroup_rules:
      - 'c 189:* rmw'
    volumes:
      - /dev/bus/usb:/dev/bus/usb
    environment:
      - DISPLAY=${DISPLAY}
      - QT_X11_NO_MITSHM=1
      - NVIDIA_DRIVER_CAPABILITIES=all
  
  # Orbbec Camera
  orbbec:
    extends: guis
    image: ghcr.io/mul-cps/ros2-rmp/rmp:orbbec
    build:
      context: .
      dockerfile: docker/Dockerfile
      tags:
        - ghcr.io/mul-cps/ros2-rmp/rmp:orbbec
      target: orbbec
      x-bake:
        platforms:
          #- linux/arm64
          - linux/amd64
    command: >
      ros2 launch orbbec_camera femto_mega.launch.py enable_colored_point_cloud:=True
    devices:
      - /dev/dev:/dev/dev
    privileged: true
    network_mode: host
    ipc: host

  # Example Robot model
  robot_model:
    extends: orbbec
    depends_on:
      - rsp
    command: >
      bash -c "source /opt/ros/humble/setup.bash &&
               xacro /overlay_ws/src/ros2_rmp_support/description/robot.urdf.xacro > /tmp/robot.urdf &&
               ros2 run robot_state_publisher robot_state_publisher /tmp/robot.urdf"